<template>
  <view wx:class="{{ innerClass }}" capture-bind:tap="handleTap2(2)">
    <slot name="before"></slot>
    this btn for runtimeCompile {{ btnName }}
    <!-- TODO：标签上存在多个对于同一事件的处理，编译会报错
      bind:touchstart="handleTap3('3', $event)"
      capture-bind:touchstart="handleTap4(4)"
     -->
    <button
      class="btn1"
      capture-bind:tap="handleTap4(4)"
    >
      this is btn1 view for not runtimeCompile
    </button>
    <slot></slot>
    <slot name="after"></slot>
    <!-- <view class="btn-wrapper">
      attr1 value is: {{ attr1 }} and attr2 value is: {{ attr2 }}

      <aaa bindaaabtn="handleaaaBtnFn"></aaa>
    </view> -->
  </view>
</template>

<script>
import { createComponent } from '@mpxjs/core'
/*
  some tips:

  1. button 有个 type 属性会导致颜色等通过 class 进行样式覆盖不生效
*/
createComponent({
  options: {
    multipleSlots: true
  },
  attached() {
    // this.$watch('attr1', function(newVal, oldVal) {
    //   console.log('the newVal and oldVal is:', newVal, oldVal)
    // }, {
    //   immediate: true
    // })
    setTimeout(() => {
      // console.log('the btn slots is:', this.slots)
    }, 1000)
    setTimeout(() => {
      console.log('the btn bigAttrs is:', this.bigAttrs)
      console.log('this attr1:', this.attr1)
      console.log('this attr2:', this.attr2)
    }, 2000)
  },
  properties: {
    attr1: {
      type: Number
    },
    attr2: {
      type: String
    }
  },
  watch: {
    attr1: {
      handler(newVal, oldVal) {
        console.log('the newVal and oldVal is:', newVal, oldVal)
      },
      immediate: true
    }
  },
  data: {
    btnName: 'this is btnName',
    innerClass: {
      active: true
    }
  },
  methods: {
    handleTap1(str) {
      console.log('handleTap1', str)
    },
    handleTap2(str) {
      console.log('handleTap2', str)
    },
    handleTap3(str, event) {
      console.log('handleTap3', str, event)
    },
    handleTap4(str) {
      console.log('handleTap4', str)
    },
    tapBtn() {
      console.log('tapBtn')
    },
    tapBtn1(str, $event) {
      this.triggerEvent('test')
      console.log('tapBtn1 and str is:', str, $event)
    },
    sayHello() {
      this.btnName = 'changed BTNNAME'
      console.log('sayHello')
      return 'sayHello'
    },
    handleaaaBtnFn() {
      console.log('handleaaaBtnFn in btn component')
    }
  }
})
</script>

<style lang="stylus">
.active
  color #fc9153
</style>

<script type="application/json">
{
  "runtimeCompile": true,
  "component": true,
  "usingComponents": {
    // "aaa": "./aaa.mpx"
  }
}
</script>
