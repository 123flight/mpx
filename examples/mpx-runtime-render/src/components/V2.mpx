<template>
  <!-- <view bind:tap="handleTap1" capture-bind:tap="handleTap2">
    <button
      class="btn1"
      bind:tap="handleTap3"
      capture-bind:tap="handleTap4"
    >
      this is btn1 view for not runtimeCompile
    </button>
  </view> -->
  <view bind:tap="handleTap1">
    <view>== this is v2 mpx start ==</view>
    <slot name="before"></slot>
    <button
      data-a="gogog"
      class="btn1"
      wx:class="{{ innerClass }}"
      bind:tap="handleTap3('g', $event)"
    >
      this is v2.mpx btn
    </button>
    <slot></slot>
    <slot name="after"></slot>
    <view>== this is v2 mpx end ==</view>
  </view>
</template>

<script>
import { createComponent } from '@mpxjs/core'
/*
  some tips:

  1. button 有个 type 属性会导致颜色等通过 class 进行样式覆盖不生效
*/
createComponent({
  options: {
    multipleSlots: true
  },
  runtimeComponent: true,
  attached() {
    setTimeout(() => {
      console.log('the attr1 and attr2 is:', this.attr1, this.attr2)
      // console.log('the objData is:', this.objData)
      // console.log('the v2 mpxParentId is11:', this.mpxParentId)
    }, 1000)
    // setTimeout(() => {
    //   console.log('this attr1:', this.attr1)
    //   console.log('this attr2:', this.attr2)
    // }, 2000)
  },
  properties: {
    // mpxParentId: {
    //   type: Number
    // },
    attr1: {
      type: Number
    },
    attr2: {
      type: String
    }
  },
  data: {
    btnName: 'this is btnName',
    innerClass: 'ok1'
  },
  methods: {
    handleTap1(str) {
      // this.triggerEvent('v2event1', { msg: 'v2event1' })
      // this.triggerEvent('v2event', { msg: 'v2event' })
      console.log('v2: handleTap1', str)
    },
    handleTap2(str) {
      console.log('v2: handleTap2', str)
    },
    handleTap3(str, event) {
      console.log('v2: handleTap3', str, event)
    },
    handleTap4(str) {
      console.log('v2: handleTap4', str)
    },
    tapBtn() {
      console.log('tapBtn')
    },
    tapBtn1(str, $event) {
      this.triggerEvent('test')
      console.log('tapBtn1 and str is:', str, $event)
    },
    sayHello() {
      this.btnName = 'changed BTNNAME'
      console.log('sayHello')
      return 'sayHello'
    },
    handleaaaBtnFn() {
      console.log('handleaaaBtnFn in btn component')
    }
  }
})
</script>

<style lang="stylus"></style>

<script type="application/json">
{
  // "runtimeCompile": true,
  "component": true,
  "usingComponents": {
    // "element": "./element"
  }
}
</script>
