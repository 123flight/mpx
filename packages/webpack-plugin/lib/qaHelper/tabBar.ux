<template>
  <div class="tab-container" id="qaCtbRef">
    <tabs onchange="onChangeTab" if="{{position === 'top'}}" index="{{selected}}" class="{{getWrapClass}}">
      <tab-bar class="tab-bar" style="{{tabBarStyle}}">
        <div for="{{(index, tabItem) in tabList}}"  class="tab-wrapper-icon">
          <image if="getWrapClass" src="{{index === selected ? tabItem.selectedIconPath : tabItem.iconPath}}"></image>
          <text class="tab-text" style="{{'color:' + (index === selected ? selectedColor : color) }}">{{tabItem.text}}</text>
        </div>
      </tab-bar>
      <tab-content class="tab-content">
        <div class="group-content" for="{{(index, tabItem) in tabList}}">
          <component is="{{tabItem.key}}"></component>
        </div>
      </tab-content>
    </tabs>
    <tabs onchange="onChangeTab" if="{{position === 'bottom'}}" index="{{selected}}" class="{{getWrapClass}}">
      <tab-content class="tab-content">
        <div class="group-content" for="{{(index, tabItem) in tabList}}">
          <component is="{{tabItem.key}}"></component>
        </div>
      </tab-content>
      <tab-bar class="tab-bar" style="{{tabBarStyle}}">
        <div for="{{(index, tabItem) in tabList}}"  class="tab-wrapper-icon">
          <image if="getWrapClass" src="{{index === selected ? tabItem.selectedIconPath : tabItem.iconPath}}"></image>
          <text class="tab-text" style="{{'color:' + (index === selected ? selectedColor : color) }}">{{tabItem.text}}</text>
        </div>
      </tab-bar>
    </tabs>
  </div>
</template>
<style>
.tab-container, .group-content {
  width: 100%;
  height: 100%;
}
.group-content div {
  width: 100% !important;
  height: 100% !important;
}
.tab-bar {
  border-color: #bbbbbb;
  color: #bbbbbb;
  border-bottom-width: 1px;
}
.tab-wrapper-icon {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding-top: 5px;
  padding-bottom: 5px;
}
.tab-wrapper-icon .tab-bar image {
  width: 48px;
  height: 48px;
}
.tab-content {
  flex: 1;
  background-color: #eeeeee;
  overflow: scroll;
}
</style>
<script>
export default {
  props: ['data'],
  data() {
    let oData = JSON.parse(this.data) || {}
    return {
      selected: 0,
      tabList: oData.list || [],
      position: oData.position || 'top',
      color: oData.color || '',
      backgroundColor: oData.backgroundColor || '',
      selectedColor: oData.selectedColor || '',
      borderStyle: oData.borderStyle || ''
    }
  },
  computed: {
    getWrapClass() {
      return this.tabList && this.tabList[0] && this.tabList[0].iconPath ? 'tab-wrapper-icon' : ''
    },
    tabBarStyle() {
      let strStyle = this.backgroundColor ? `background-color: ${this.backgroundColor};` : ''
      strStyle += this.getWrapClass ? 'height: 120px;' : 'height: 100px;'
      strStyle += this.borderStyle ? `border-top-width: 1px;border-color:${this.borderStyle};` : ''
      return strStyle
    }
  },
  onInit() {
    console.info(`外部传递的数据：`, this.data)
  },
  onChangeTab(e) {
    this.selected = e.index
  }
}
</script>
